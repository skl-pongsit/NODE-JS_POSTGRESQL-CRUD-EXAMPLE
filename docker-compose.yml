version: '3.3' #เป็นการระบุว่าเราจะใช้ Compose file เวอร์ชั่นไหน

services: #เป็นการระบุ container ที่จะต้องใช้
  # Service Nginx
  nginx:
    image: nginx:latest
    ports:
      - "80:80"  #เป็นการทำ port mapping ระหว่าง host 80 กับ container 80 , # เปิดเผยพอร์ต 80 สู่ภายนอก (Public Tier)
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # เชื่อมโยงไฟล์ nginx.conf กับ container
    networks:
      - public  # Nginx เชื่อมต่อกับ public network
      - private  # และเชื่อมต่อกับ private network เพื่อเข้าถึง API
    depends_on: #สั่งให้ service นั้นเริ่มทำงานหลังจาก service ที่ depens_on อยู่เริ่มต้นทำงานเสร็จแล้ว
      - api

  # Service Node.js API
  api:
    build: #การบอกว่าให้ใช้ image ที่สร้างจาก Dockerfile
      context: . #path ของ dockerfile เพื่อที่จะใช้ในการสร้าง container
      dockerfile: Dockerfile
    volumes:
      - .:/app  # เชื่อมโยงโค้ดทั้งหมดเข้า กับ container เพื่อให้สามารถแก้ไขได้แบบ live
      - /app/node_modules  # ป้องกันไม่ให้ node_modules ใน container ทับกับของ host
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}  # เชื่อมต่อกับ PostgreSQL"
    expose:
      - "8080"  # API เปิดเผยพอร์ต 8080 ภายในเครือข่าย private
    networks:
      - private  # Node.js API เชื่อมต่อกับ private network
    depends_on: #ทำการ Startก่อน
      - db  # API จะรอให้ db service พร้อมก่อนที่จะเริ่มทำงาน

  # Service PostgreSQL
  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data  # เชื่อมโยง volume เพื่อเก็บข้อมูลฐานข้อมูล 
      #hostpath!!
    networks:
      - private  # PostgreSQL เชื่อมต่อกับ private network

# กำหนด Volumes สำหรับการเก็บข้อมูล
volumes:
  db-data:

# กำหนด Networks
networks: #เป็นการใช้เพื่อสร้างเส้นทางสื่อสารกันระหว่าง container
  public:
    driver: bridge  # สร้างเครือข่าย Public สำหรับ Nginx
  private:
    driver: bridge  # สร้างเครือข่าย Private สำหรับ API และ PostgreSQL

    #bridge สามารถสื่อสารกันได้ และสามารถใช้ NAT (Network Address Translation) เพื่อสื่อสารกับเครือข่ายภายนอก
