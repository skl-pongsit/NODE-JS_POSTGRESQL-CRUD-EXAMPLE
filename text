pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-runner
  containers:
  - name: kubectl
    image: alpine/k8s:1.29.2
    command:
    - sleep
    args:
    - 99999999
    tty: true
  - name: docker
    image: registry.hub.docker.com/library/docker:dind
    command:
      - sh
    args:
      - -c
      - "/usr/local/bin/dockerd-entrypoint.sh && sleep 99999999"
    tty: true 
    securityContext:
      privileged: true
      runAsUser: 0
'''
            defaultContainer 'kubectl'
        }
    }

    environment {
        dockerImage = ''
        ns_deploy = ''
        GIT_HASH = GIT_COMMIT.take(7)
        ns_develop = "develop"
        ns_staging = "staging"
        application_name = "sl-answer3-application"
    }

    stages {
        stage('Prepare') {
            steps {
                container('kubectl') {
                    script{
                      
                        // Set environment variables
                        def NAMESPACE = sh(script: 'cat /var/run/secrets/kubernetes.io/serviceaccount/namespace', returnStdout: true).trim()
                        def TOKEN = sh(script: 'cat /var/run/secrets/kubernetes.io/serviceaccount/token', returnStdout: true).trim()
                        def KUBE_API = 'https://kubernetes.default.svc.cluster.local'
                        def SA = 'jenkins-runner' //jenkins
                        
                        // Configure kubectl
                        sh "kubectl config set-cluster my-cluster --server=$KUBE_API --insecure-skip-tls-verify=true"
                        sh "kubectl config set-credentials $SA --token=$TOKEN --namespace=$NAMESPACE"
                        sh "kubectl config set-context my-context --user=$SA --cluster=my-cluster --namespace=$NAMESPACE"
                        sh "kubectl config use-context my-context"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                container('docker') {
                    script{
                        dockerImage = docker.build("wayuslatan/${env.application_name}:${env.BRANCH_NAME}-${env.GIT_HASH}")
                        withDockerRegistry(
                            credentialsId: 'wayuslatan',
                            url: 'https://index.docker.io/v1/') {
                            dockerImage.push()
                        }
                    }
                }
            }
        }

         ('Deploy') {
            steps {
                container('kubectl') {
                    script{
                        if (env.BRANCH_NAME == 'develop') {
                            ns_deploy = env.ns_develop
                        } else if (env.BRANCH_NAME == 'main') {
                            ns_deploy = env.ns_staging
                        } else {
                            error "Unsupported branch: ${env.BRANCH_NAME}"
                        }

                        sh "kubectl get all -A"
                        sh "echo ${env.BRANCH_NAME}"
                        sh "echo ${env.GIT_COMMIT}"
                        sh "echo $ns_develop"
                        sh "echo $ns_staging"
                        sh "echo $ns_deploy"

                        sh "helm upgrade -i ${env.application_name} helm-generic-chart -f deployment/values-${ns_deploy}.yaml --set image.repository=wayuslatan/${env.application_name} --set image.tag=${env.BRANCH_NAME}-${env.GIT_HASH} --set fullnameOverride=${env.application_name} -n ${ns_deploy}"

                    }
                }
            }
        }
    }
}